{"version":3,"sources":["radio/radio.js"],"names":["bindable","customElement","bindingMode","inject","AttributeManager","getBooleanFromAttributeValue","MdRadio","Element","defaultBindingMode","twoWay","element","controlId","id","attached","attributeManager","radio","mdGap","addClasses","mdDisabled","disabled","mdReadonly","detached","removeClasses","mdDisabledChanged","newValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,c,sBAAAA,Q;AAAUC,mB,sBAAAA,a;;AACVC,iB,mBAAAA,W;;AACAC,Y,+BAAAA,M;;AACAC,sB,2BAAAA,gB;;AACAC,kC,qBAAAA,4B;;;yBAIIC,O,WAFZL,cAAc,UAAd,C,UACAE,OAAOI,OAAP,C,UAGEP,SAAS;AACRQ,4BAAoBN,YAAYO;AADxB,OAAT,C,UAGAT,U,UACAA,U,UACAA,U,UACAA,U,UACAA,U,UACAA,U;AAED,yBAAYU,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAKA,OAAL,GAAeA,OAAf;AACA,eAAKC,SAAL,iBAA6BL,QAAQM,EAAR,EAA7B;AAED;;0BAEDC,Q,uBAAW;AACT,eAAKC,gBAAL,GAAwB,IAAIV,gBAAJ,CAAqB,KAAKW,KAA1B,CAAxB;AACA,cAAIV,6BAA6B,KAAKW,KAAlC,CAAJ,EAA8C;AAC5C,iBAAKF,gBAAL,CAAsBG,UAAtB,CAAiC,UAAjC;AACD;AACD,cAAIZ,6BAA6B,KAAKa,UAAlC,CAAJ,EAAmD;AACjD,iBAAKH,KAAL,CAAWI,QAAX,GAAsB,IAAtB;AACD;AACD,eAAKC,UAAL,GAAkBf,6BAA6B,KAAKe,UAAlC,CAAlB;AAGD,S;;0BAEDC,Q,uBAAW;AACT,eAAKP,gBAAL,CAAsBQ,aAAtB,CAAoC,CAAC,UAAD,EAAa,UAAb,CAApC;AAED,S;;0BAYDC,iB,8BAAkBC,Q,EAAU;AAC1B,cAAI,KAAKT,KAAT,EAAgB;AACd,iBAAKA,KAAL,CAAWI,QAAX,GAAsB,CAAC,CAACK,QAAxB;AACD;AACF,S;;;mBAjDMZ,E,GAAK,C;;;;;;iBAIa,K;;;;;iBACA,K;;;;;iBACL,K;;;;;;;;iBAEC,E;;;;;iBACC,E","file":"../../../radio/radio.js","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\n\r\n@customElement('md-radio')\r\n@inject(Element)\r\nexport class MdRadio {\r\n  static id = 0;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.twoWay\r\n  }) mdChecked;\r\n  @bindable() mdDisabled = false;\r\n  @bindable() mdReadonly = false;\r\n  @bindable() mdGap = false;\r\n  @bindable() mdModel;\r\n  @bindable() mdName = '';\r\n  @bindable() mdValue = '';\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.controlId = `md-radio-${MdRadio.id++}`;\r\n    // this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  attached() {\r\n    this.attributeManager = new AttributeManager(this.radio);\r\n    if (getBooleanFromAttributeValue(this.mdGap)) {\r\n      this.attributeManager.addClasses('with-gap');\r\n    }\r\n    if (getBooleanFromAttributeValue(this.mdDisabled)) {\r\n      this.radio.disabled = true;\r\n    }\r\n    this.mdReadonly = getBooleanFromAttributeValue(this.mdReadonly);\r\n    // this.radio.checked = getBooleanFromAttributeValue(this.mdChecked);\r\n    // this.radio.addEventListener('change', this.handleChange);\r\n  }\r\n\r\n  detached() {\r\n    this.attributeManager.removeClasses(['with-gap', 'disabled']);\r\n    // this.radio.removeEventListener('change', this.handleChange);\r\n  }\r\n\r\n  // handleChange() {\r\n  //   this.mdChecked = this.radio.checked;\r\n  // }\r\n\r\n  // mdCheckedChanged(newValue) {\r\n  //   if (this.radio) {\r\n  //     this.radio.checked = !!newValue;\r\n  //   }\r\n  // }\r\n\r\n  mdDisabledChanged(newValue) {\r\n    if (this.radio) {\r\n      this.radio.disabled = !!newValue;\r\n    }\r\n  }\r\n}\r\n"]}