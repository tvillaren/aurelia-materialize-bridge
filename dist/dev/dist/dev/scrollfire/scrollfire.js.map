{"version":3,"sources":["scrollfire/scrollfire.js"],"names":["customAttribute","inject","getLogger","MdScrollfire","Element","element","targetId","log","attached","targets","$","length","debug","self","options","each","i","el","target","attr","push","selector","callback","get","au","viewModel","offset","parseInt","Materialize","scrollFire"],"mappings":";;;;;;;;;;;;;AAASA,qB,sBAAAA,e;;AACAC,Y,+BAAAA,M;;AACAC,e,mBAAAA,S;;;8BAIIC,Y,WAFZH,gBAAgB,eAAhB,C,UACAC,OAAOG,OAAP,C;AAGC,8BAAYC,OAAZ,EAAqB;AAAA;;AAAA,eADrBC,QACqB,GADV,CACU;;AACnB,eAAKD,OAAL,GAAeA,OAAf;AACA,eAAKE,GAAL,GAAWL,UAAU,eAAV,CAAX;AACD;;+BAEDM,Q,uBAAW;AACT,cAAIC,UAAUC,EAAE,wBAAF,EAA4B,KAAKL,OAAjC,CAAd;AACA,cAAII,QAAQE,MAAR,GAAiB,CAArB,EAAwB;AACtB,iBAAKJ,GAAL,CAASK,KAAT,CAAe,SAAf,EAA0BH,OAA1B;AACA,gBAAII,OAAO,IAAX;AACA,gBAAIC,UAAU,EAAd;AACAL,oBAAQM,IAAR,CAAa,UAACC,CAAD,EAAIC,EAAJ,EAAW;AACtB,kBAAIC,SAASR,EAAEO,EAAF,CAAb;AACA,kBAAI,CAACC,OAAOC,IAAP,CAAY,IAAZ,CAAL,EAAwB;AACtBD,uBAAOC,IAAP,CAAY,IAAZ,4BAA0CN,KAAKP,QAAL,EAA1C;AACD;AACDQ,sBAAQM,IAAR,CAAa;AACXC,0BAAU,MAAMH,OAAOC,IAAP,CAAY,IAAZ,CADL;AAEXG,0BAAUJ,OAAOK,GAAP,CAAW,CAAX,EAAcC,EAAd,CAAiB,sBAAjB,EAAyCC,SAAzC,CAAmDH,QAFlD;AAGXI,wBAAQC,SAAST,OAAOK,GAAP,CAAW,CAAX,EAAcC,EAAd,CAAiB,sBAAjB,EAAyCC,SAAzC,CAAmDC,MAA5D,EAAoE,EAApE;AAHG,eAAb;AAKD,aAVD;AAWA,gBAAIZ,QAAQH,MAAR,GAAiB,CAArB,EAAwB;AACtB,mBAAKJ,GAAL,CAASK,KAAT,CAAe,4CAAf,EAA6DE,OAA7D;AACAc,0BAAYC,UAAZ,CAAuBf,OAAvB;AACD;AACF;AACF,S","file":"../../../scrollfire/scrollfire.js","sourcesContent":["import { customAttribute } from 'aurelia-templating';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { getLogger } from 'aurelia-logging';\r\n\r\n@customAttribute('md-scrollfire')\r\n@inject(Element)\r\nexport class MdScrollfire {\r\n  targetId = 0;\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.log = getLogger('md-scrollfire');\r\n  }\r\n\r\n  attached() {\r\n    let targets = $('[md-scrollfire-target]', this.element);\r\n    if (targets.length > 0) {\r\n      this.log.debug('targets', targets);\r\n      let self = this;\r\n      let options = [];\r\n      targets.each((i, el) => {\r\n        let target = $(el);\r\n        if (!target.attr('id')) {\r\n          target.attr('id', `md-scrollfire-target-${self.targetId++}`);\r\n        }\r\n        options.push({\r\n          selector: '#' + target.attr('id'),\r\n          callback: target.get(0).au['md-scrollfire-target'].viewModel.callback,\r\n          offset: parseInt(target.get(0).au['md-scrollfire-target'].viewModel.offset, 10)\r\n        });\r\n      });\r\n      if (options.length > 0) {\r\n        this.log.debug('configuring scrollFire with these options:', options);\r\n        Materialize.scrollFire(options);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}